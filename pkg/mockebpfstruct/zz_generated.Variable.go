// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
/*
 * Copyright 2025 Alexandre Mahdhaoui
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package mockebpfstruct

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockVariable creates a new instance of MockVariable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVariable[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVariable[T] {
	mock := &MockVariable[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVariable is an autogenerated mock type for the Variable type
type MockVariable[T any] struct {
	mock.Mock
}

type MockVariable_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockVariable[T]) EXPECT() *MockVariable_Expecter[T] {
	return &MockVariable_Expecter[T]{mock: &_m.Mock}
}

// Set provides a mock function for the type MockVariable
func (_mock *MockVariable[T]) Set(v T) error {
	ret := _mock.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(T) error); ok {
		r0 = returnFunc(v)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVariable_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockVariable_Set_Call[T any] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - v
func (_e *MockVariable_Expecter[T]) Set(v interface{}) *MockVariable_Set_Call[T] {
	return &MockVariable_Set_Call[T]{Call: _e.mock.On("Set", v)}
}

func (_c *MockVariable_Set_Call[T]) Run(run func(v T)) *MockVariable_Set_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(T))
	})
	return _c
}

func (_c *MockVariable_Set_Call[T]) Return(err error) *MockVariable_Set_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVariable_Set_Call[T]) RunAndReturn(run func(v T) error) *MockVariable_Set_Call[T] {
	_c.Call.Return(run)
	return _c
}

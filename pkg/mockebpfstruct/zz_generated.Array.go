// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify
/*
 * Copyright 2025 Alexandre Mahdhaoui
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package mockebpfstruct

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockArray creates a new instance of MockArray. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockArray[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockArray[T] {
	mock := &MockArray[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockArray is an autogenerated mock type for the Array type
type MockArray[T any] struct {
	mock.Mock
}

type MockArray_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockArray[T]) EXPECT() *MockArray_Expecter[T] {
	return &MockArray_Expecter[T]{mock: &_m.Mock}
}

// Set provides a mock function for the type MockArray
func (_mock *MockArray[T]) Set(values []T) error {
	ret := _mock.Called(values)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]T) error); ok {
		r0 = returnFunc(values)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockArray_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockArray_Set_Call[T any] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - values
func (_e *MockArray_Expecter[T]) Set(values interface{}) *MockArray_Set_Call[T] {
	return &MockArray_Set_Call[T]{Call: _e.mock.On("Set", values)}
}

func (_c *MockArray_Set_Call[T]) Run(run func(values []T)) *MockArray_Set_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]T))
	})
	return _c
}

func (_c *MockArray_Set_Call[T]) Return(err error) *MockArray_Set_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockArray_Set_Call[T]) RunAndReturn(run func(values []T) error) *MockArray_Set_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SetAndDeferSwitchover provides a mock function for the type MockArray
func (_mock *MockArray[T]) SetAndDeferSwitchover(values []T) (func(), error) {
	ret := _mock.Called(values)

	if len(ret) == 0 {
		panic("no return value specified for SetAndDeferSwitchover")
	}

	var r0 func()
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]T) (func(), error)); ok {
		return returnFunc(values)
	}
	if returnFunc, ok := ret.Get(0).(func([]T) func()); ok {
		r0 = returnFunc(values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func())
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]T) error); ok {
		r1 = returnFunc(values)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockArray_SetAndDeferSwitchover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAndDeferSwitchover'
type MockArray_SetAndDeferSwitchover_Call[T any] struct {
	*mock.Call
}

// SetAndDeferSwitchover is a helper method to define mock.On call
//   - values
func (_e *MockArray_Expecter[T]) SetAndDeferSwitchover(values interface{}) *MockArray_SetAndDeferSwitchover_Call[T] {
	return &MockArray_SetAndDeferSwitchover_Call[T]{Call: _e.mock.On("SetAndDeferSwitchover", values)}
}

func (_c *MockArray_SetAndDeferSwitchover_Call[T]) Run(run func(values []T)) *MockArray_SetAndDeferSwitchover_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]T))
	})
	return _c
}

func (_c *MockArray_SetAndDeferSwitchover_Call[T]) Return(fn func(), err error) *MockArray_SetAndDeferSwitchover_Call[T] {
	_c.Call.Return(fn, err)
	return _c
}

func (_c *MockArray_SetAndDeferSwitchover_Call[T]) RunAndReturn(run func(values []T) (func(), error)) *MockArray_SetAndDeferSwitchover_Call[T] {
	_c.Call.Return(run)
	return _c
}
